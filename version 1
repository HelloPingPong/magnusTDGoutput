
					<!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
							<style>
								body {
									background-color: white; /* Ensure the iframe has a white background */
								}

								body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

header {
    background-color: #004D7F; /* JPMorganChase Blue */
    color: white;
    padding: 1em 0;
    text-align: center;
}

main {
    padding: 2em;
}

section {
    margin-bottom: 2em;
}

form {
    display: flex;
    flex-direction: column;
}

label {
    margin-top: 1em;
    color: #333;
}

input, select, textarea {
    padding: 0.5em;
    margin-top: 0.5em;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    margin-top: 1em;
    padding: 0.5em;
    background-color: #004D7F; /* JPMorganChase Blue */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #006699; /* Darker shade of JPMorganChase Blue */
}

#data-result, #schedule-result, #template-result, #template-details {
    margin-top: 1em;
    padding: 1em;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.field-row {
    display: flex;
    align-items: center;
    margin-bottom: 1em;
}

.field-row label {
    margin-right: 0.5em;
    color: #333;
}

.field-row input, .field-row select {
    margin-right: 1em;
}

.field-row button {
    margin-left: 0.5em;
}


							</style>
                        </head>
                        <body>
                            
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JPMorganChase Data Generation Tool</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>JPMorganChase Data Generation Tool</h1>
    </header>
    <main>
        <section id="data-generation">
            <h2>Generate Data</h2>
            <form id="generate-data-form">
                <label for="template-ids">Template IDs (comma-separated):</label>
                <input type="text" id="template-ids" name="template-ids" required>
                <label for="row-count">Row Count:</label>
                <input type="number" id="row-count" name="row-count" value="100" required>
                <label for="output-format">Output Format:</label>
                <select id="output-format" name="output-format" required>
                    <option value="CSV">CSV</option>
                    <option value="JSON">JSON</option>
                    <option value="XML">XML</option>
                </select>
                <button type="submit">Generate Data</button>
            </form>
            <div id="data-result"></div>
        </section>
        <section id="schedule-management">
            <h2>Schedule Management</h2>
            <form id="create-schedule-form">
                <label for="schedule-name">Schedule Name:</label>
                <input type="text" id="schedule-name" name="schedule-name" required>
                <label for="template-id">Template ID:</label>
                <input type="number" id="template-id" name="template-id" required>
                <label for="status">Status:</label>
                <select id="status" name="status" required>
                    <option value="ACTIVE">ACTIVE</option>
                    <option value="PAUSED">PAUSED</option>
                </select>
                <button type="submit">Create Schedule</button>
            </form>
            <div id="schedule-result"></div>
        </section>
        <section id="template-management">
            <h2>Template Management</h2>
            <form id="create-template-form">
                <label for="template-name">Template Name:</label>
                <input type="text" id="template-name" name="template-name" required>
                <div id="fields-container">
                    <div class="field-row">
                        <label for="field-name-0">Field Name:</label>
                        <input type="text" id="field-name-0" name="field-name-0" required>
                        <label for="data-type-0">Data Type:</label>
                        <select id="data-type-0" name="data-type-0" required>
                            <option value="string">String</option>
                            <option value="integer">Integer</option>
                            <option value="boolean">Boolean</option>
                            <option value="date">Date</option>
                        </select>
                        <label for="constraints-0">Constraints:</label>
                        <input type="text" id="constraints-0" name="constraints-0">
                        <button type="button" onclick="addField()">Add Field</button>
                        <button type="button" onclick="deleteField(0)">Delete Field</button>
                    </div>
                </div>
                <button type="submit">Create Template</button>
            </form>
            <div id="template-result"></div>
        </section>
        <section id="existing-templates">
            <h2>Existing Templates</h2>
            <select id="template-select" onchange="loadTemplateDetails()">
                <option value="">Select a template</option>
            </select>
            <div id="template-details"></div>
        </section>
    </main>
    <script src="script.js"></script>
</body>




							<script>
                            	let fieldCount = 1;

function addField() {
    const fieldsContainer = document.getElementById('fields-container');
    const newFieldRow = document.createElement('div');
    newFieldRow.className = 'field-row';
    newFieldRow.innerHTML = `
        <label for="field-name-${fieldCount}">Field Name:</label>
        <input type="text" id="field-name-${fieldCount}" name="field-name-${fieldCount}" required>
        <label for="data-type-${fieldCount}">Data Type:</label>
        <select id="data-type-${fieldCount}" name="data-type-${fieldCount}" required>
            <option value="string">String</option>
            <option value="integer">Integer</option>
            <option value="boolean">Boolean</option>
            <option value="date">Date</option>
        </select>
        <label for="constraints-${fieldCount}">Constraints:</label>
        <input type="text" id="constraints-${fieldCount}" name="constraints-${fieldCount}">
        <button type="button" onclick="addField()">Add Field</button>
        <button type="button" onclick="deleteField(${fieldCount})">Delete Field</button>
    `;
    fieldsContainer.appendChild(newFieldRow);
    fieldCount++;
}

function deleteField(index) {
    const fieldsContainer = document.getElementById('fields-container');
    fieldsContainer.removeChild(fieldsContainer.children[index]);
    // Reorder fields after deletion
    const fieldRows = Array.from(fieldsContainer.children);
    fieldRows.forEach((row, idx) => {
        row.querySelector(`[id^='field-name-']`).id = `field-name-${idx}`;
        row.querySelector(`[id^='field-name-']`).name = `field-name-${idx}`;
        row.querySelector(`[id^='data-type-']`).id = `data-type-${idx}`;
        row.querySelector(`[id^='data-type-']`).name = `data-type-${idx}`;
        row.querySelector(`[id^='constraints-']`).id = `constraints-${idx}`;
        row.querySelector(`[id^='constraints-']`).name = `constraints-${idx}`;
        row.querySelector(`[onclick*='deleteField']`).onclick = `deleteField(${idx})`;
    });
}

async function loadTemplates() {
    try {
        const response = await fetch('/api/templates');
        if (response.ok) {
            const templates = await response.json();
            const templateSelect = document.getElementById('template-select');
            templates.forEach(template => {
                const option = document.createElement('option');
                option.value = template.id;
                option.textContent = template.name;
                templateSelect.appendChild(option);
            });
        } else {
            alert('Error loading templates');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading templates');
    }
}

async function loadTemplateDetails() {
    const selectedTemplateId = document.getElementById('template-select').value;
    if (!selectedTemplateId) return;

    try {
        const response = await fetch(`/api/templates/${selectedTemplateId}`);
        if (response.ok) {
            const template = await response.json();
            const templateDetails = document.getElementById('template-details');
            templateDetails.innerText = JSON.stringify(template, null, 2);
        } else {
            alert('Error loading template details');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error loading template details');
    }
}

document.getElementById('generate-data-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    const templateIds = document.getElementById('template-ids').value.split(',').map(id => id.trim());
    const rowCount = document.getElementById('row-count').value;
    const outputFormat = document.getElementById('output-format').value;

    try {
        const response = await fetch('/api/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                templateIds,
                rowCount,
                outputFormat
            })
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `generated_data_${Date.now()}.${outputFormat.toLowerCase()}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        } else {
            alert('Error generating data');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error generating data');
    }
});

document.getElementById('create-schedule-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    const scheduleName = document.getElementById('schedule-name').value;
    const templateId = document.getElementById('template-id').value;
    const status = document.getElementById('status').value;

    try {
        const response = await fetch('/api/schedules', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: scheduleName,
                templateId,
                status
            })
        });

        if (response.ok) {
            const result = await response.json();
            document.getElementById('schedule-result').innerText = JSON.stringify(result, null, 2);
        } else {
            alert('Error creating schedule');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating schedule');
    }
});

document.getElementById('create-template-form').addEventListener('submit', async (event) => {
    event.preventDefault();
    const templateName = document.getElementById('template-name').value;
    const fields = [];
    for (let i = 0; i < fieldCount; i++) {
        const fieldName = document.getElementById(`field-name-${i}`).value;
        const dataType = document.getElementById(`data-type-${i}`).value;
        const constraints = document.getElementById(`constraints-${i}`).value;
        fields.push({ name: fieldName, type: dataType, constraints });
    }

    try {
        const response = await fetch('/api/templates', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: templateName,
                fields
            })
        });

        if (response.ok) {
            const result = await response.json();
            document.getElementById('template-result').innerText = JSON.stringify(result, null, 2);
        } else {
            alert('Error creating template');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error creating template');
    }
});

// Load templates on page load
loadTemplates();


							</script>
                        </body>
                        </html>
                    
